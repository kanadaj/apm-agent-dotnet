@page "/fetchdata"
@using Elastic.Apm
@using Elastic.Apm.Api
@using Elastic.Apm.DiagnosticSource
@inject HttpClient Http

<h1>Weather forecast</h1>

<p>This component demonstrates fetching data from the server.</p>

@if (forecasts == null)
{
	<p>
		<em>Loading...</em>
	</p>
}
else
{
	<table class="table">
		<thead>
		<tr>
			<th>Date</th>
			<th>Temp. (C)</th>
			<th>Temp. (F)</th>
			<th>Summary</th>
		</tr>
		</thead>
		<tbody>
		@foreach (var forecast in forecasts)
		{
			<tr>
				<td>@forecast.Date.ToShortDateString()</td>
				<td>@forecast.TemperatureC</td>
				<td>@forecast.TemperatureF</td>
				<td>@forecast.Summary</td>
			</tr>
		}
		</tbody>
	</table>
}

@code {
	private WeatherForecast[] forecasts;

	protected override void OnInitialized() { }

	protected override void OnParametersSet() { }

	protected override void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);
		_transaction?.End();
	}

	ITransaction _transaction;

	protected override async Task OnInitializedAsync()
	{
		if (!Agent.IsConfigured)
		{
			Agent.Setup(AgentComponents.RumAgentComponents());
			Agent.Subscribe(new HttpDiagnosticsSubscriber());
		}

		_transaction = Agent.Tracer.StartTransaction("FetchData_Component", "Component");
		var span = _transaction.StartSpan("GET sample-data/weather.json",ApiConstants.TypeExternal, ApiConstants.SubtypeHttp);
		forecasts = await Http.GetFromJsonAsync<WeatherForecast[]>("sample-data/weather.json");
		span.End();
	}

	public class WeatherForecast
	{
		public DateTime Date { get; set; }

		public int TemperatureC { get; set; }

		public string Summary { get; set; }

		public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
	}

}