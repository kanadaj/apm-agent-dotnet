@page "/counter"
@using Elastic.Apm.Api
@using Elastic.Apm
@using Elastic.Apm.DiagnosticSource

@inject HttpClient Http

<h1>Counter</h1>

<p>Current count: @currentCount</p>


<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {

	protected override void OnInitialized()
	{
		if(!Agent.IsConfigured)
		{
			Agent.Setup(new RumConfig().RumAgentComponents);
			Agent.Subscribe(new HttpDiagnosticsSubscriber());
		}

		_transaction = Agent.Tracer.StartTransaction("Counter_Component", "Component");
	}

	protected override void OnParametersSet()
	{
		//_transaction?.Marks.Add(new Dictionary<string, Dictionary<string, int>>{ {"agent", new Dictionary<string, int>(){"sdfdf", 12}} }  );
	}

	protected override void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);
		_transaction?.End();
	}

	ITransaction _transaction;
	private int currentCount = 0;

    private async Task IncrementCount()
    {
	//  var res = await Http.GetAsync("http://localhost:5050/api/Values");
	    var nt = Agent.Tracer.StartTransaction("IncrementCount", "Component");
	    try
	    {
		    var request = new HttpRequestMessage(HttpMethod.Get, "http://localhost:5050/api/Values");
		    request.Headers.Add("traceparent", nt?.OutgoingDistributedTracingData.SerializeToString());
		    var res = await Http.SendAsync(request);
		    var stringRes = await res.Content.ReadAsStringAsync();
		    Console.WriteLine(stringRes);
		    currentCount++;
		    nt.End();
	    }
	    finally
	    {
		   
	    }
    }
}
