@page "/counter"
@using Elastic.Apm.Api
@using Elastic.Apm
@using Elastic.Apm.DiagnosticSource

@inject HttpClient Http
@inject ITracer Tracer

<h1>Counter</h1>

<p>Current count: @currentCount</p>


<button class="btn btn-primary" @onclick="IncrementCount">Click me</button>

@code {

	protected override void OnInitialized()
	{
		_transaction = Agent.Tracer.StartTransaction("Counter_Component", "Component");
	}

	protected override void OnAfterRender(bool firstRender)
	{
		base.OnAfterRender(firstRender);
		_transaction?.End();
	}

	ITransaction _transaction;
	private int currentCount = 0;

	private async Task IncrementCount()
	{
		await Tracer.CaptureTransaction("IncrementCount", "Component", async transaction =>
		{
			await transaction.CaptureSpan("Call backend", ApiConstants.TypeExternal, async (transaction) =>
			{
				await transaction.CaptureSpan("GET /api/values", ApiConstants.TypeExternal,  async span =>
				{
					var uri = "http://localhost:5050/api/Values";
					span.Context.Http = new Http { Url = uri, Method = "GET"};
					
					var request = new HttpRequestMessage(HttpMethod.Get, "http://localhost:5050/api/Values");
					request.Headers.Add("traceparent", transaction?.OutgoingDistributedTracingData.SerializeToString());
					var res = await Http.SendAsync(request);

					span.Context.Http.StatusCode = (int)res.StatusCode;
					var stringRes = await res.Content.ReadAsStringAsync();
				});
			});


			currentCount++;

		});
	}
}
